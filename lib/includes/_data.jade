
//- ///////////////////////////////////////////////////////////////////////////////
//- //
//- // This file holds 'local' data for the styleguide pattern library.
//- //
//- ///////////////////////////////////////////////////////////////////////////////


include /node_modules/xmeter/docs/includes/_data.jade
//- TODO remove on xmeter v5.1 and uncomment
//- include /node_modules/xmeter/docs/includes/class/_Xmeter.class.jade
-
  var Lib = (function () {
    function Lib() {}
    Lib.PAGES = [
      JSON.parse(JSON.stringify(Xmeter.getPage('index.html')))
    , JSON.parse(JSON.stringify(Xmeter.getPage('visual.html')))
    , JSON.parse(JSON.stringify(Xmeter.getPage('base.html')))
    , JSON.parse(JSON.stringify(Xmeter.getPage('obj.html')))
    , JSON.parse(JSON.stringify(Xmeter.getPage('comp.html')))
    , JSON.parse(JSON.stringify(Xmeter.getPage('help.html')))
    , JSON.parse(JSON.stringify(Xmeter.getPage('atom.html')))
    ]
    Lib.DOCS_CLASSES = {
      figure : 'docs-figure'
    , pre    : 'docs-pre'
    , code   : 'docs-code'
    }
    Lib.getPage = function getPage(url0) {
      return Lib.PAGES.find(function (item) { return item.url === url0 })
    }
    Lib.getPage('visual.html').is_hidden = false
    Lib.getPage('visual.html').sub = [
          { name: 'ASCE'     , url: 'visual.html#asce' }
        , { name: 'ASCE 2016', url: 'visual.html#asce2016' }
    ]
    Lib.getPage('obj.html').sub = Lib.getPage('obj.html').sub.concat([
          { name: 'The Float Grid'     , url: 'obj.html#float-grid' }
        , { name: 'The Runner Object'  , url: 'obj.html#runner-object' }
        , { name: 'The Content Wrapper', url: 'obj.html#content-wrapper' }
        , { name: 'The Action List'    , url: 'obj.html#action-list' }
        , { name: 'The Stacked List'   , url: 'obj.html#stacked-list' }
        , { name: 'The Drawer Object'  , url: 'obj.html#drawer-object' }
    ])
    Lib.getPage('comp.html').is_hidden = false
    Lib.getPage('comp.html').sub = [
          { name: 'The Masthead and Mastfoot', url: 'comp.html#masthead-mastfoot' }
        , { name: 'The Site Title'           , url: 'comp.html#site-title' }
        , { name: 'The Universal Menu'       , url: 'comp.html#universal-menu' }
        , { name: 'The Standard Menu'        , url: 'comp.html#standard-menu' }
        , { name: 'The Sub Menu'             , url: 'comp.html#sub-menu' }
        , { name: 'The Sitemap Component'    , url: 'comp.html#sitemap-component' }
        , { name: 'The Page Title'           , url: 'comp.html#page-title' }
        , { name: 'The Banner Component'     , url: 'comp.html#banner-component' }
        , { name: 'The Hero Block'           , url: 'comp.html#hero-block' }
        , { name: 'The Other Year Block'     , url: 'comp.html#other-year-block' }
        , { name: 'The Overlay Component'    , url: 'comp.html#overlay-component' }
        , { name: 'The Sponsor Logo'         , url: 'comp.html#sponsor-logo' }
        , { name: 'The Sponsor Block'        , url: 'comp.html#sponsor-block' }
        , { name: 'The Sponsor Carousel'     , url: 'comp.html#sponsor-carousel' }
        , { name: 'The Date Block'           , url: 'comp.html#date-block' }
        , { name: 'The Pass Component'       , url: 'comp.html#pass-component' }
        , { name: 'The Program Component'    , url: 'comp.html#program-component' }
        , { name: 'The Time Block'           , url: 'comp.html#time-block' }
        , { name: 'The Speaker Component'    , url: 'comp.html#speaker-component' }
        , { name: 'The Social List'          , url: 'comp.html#social-list' }
        , { name: 'The Callout Component'    , url: 'comp.html#callout-component' }
        , { name: 'Buttons'                  , url: 'comp.html#buttons' }
        , { name: 'The Toggle Button'        , url: 'comp.html#toggle-button' }
        , { name: 'The Camo Link'            , url: 'comp.html#camo-link'}
    ]
    return Lib
  })()

mixin libtoc(args)
  //- NOTE parameter validation
  -
    var pages   = args.pages   || []
    var classes = args.classes || {}
    var depth   = +args.depth  || 0
  ol(class=classes.listclasses)
    each item in pages
      li(class=classes.itemclasses)
        a(class=classes.linkclasses href=item.url)= item.name
        if item.sub && depth > 0
          +libtoc({pages: item.sub, classes: (classes.sub || {}), depth: depth-1})

mixin microdataCheckbox(id)
  div.docs-c-Togglable
    input.docs-c-Togglable__Check(id=id+'-check' type="checkbox" value=id+'-md-true')
    label(for=id+'-check') show microdata
    block
