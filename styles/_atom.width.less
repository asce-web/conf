
/*################################*\
    conf  |  _atom.width.less
\*################################*/


// Sets the width of an element.
// Percentage-based widths are fractions with denominators 1–6, and 10.
// Pixel-based widths are multiples of 16px, up to 960px.
// Em-based widths are multiples of 15em, up to 90em.
// If you need more, you better just use inline styles.
//
// ^author
// : Chris Harvey
// ^updated
// : 2016-02-09
.a-w-0 { width: 0; }
@media screen and (min-width: 30em) { .a-w-0-sK { .a-w-0; } }
@media screen and (min-width: 45em) { .a-w-0-sM { .a-w-0; } }
@media screen and (min-width: 60em) { .a-w-0-sG { .a-w-0; } }
@media screen and (min-width: 75em) { .a-w-0-sT { .a-w-0; } }

//++++++++++++++++++++++++++++++++//
//    # PERCENTAGE-BASED WIDTHS
//++++++++++++++++++++++++++++++++//
.a-w-10o10,
.a-w-8o8,
.a-w-6o6,
.a-w-5o5,
.a-w-4o4,
.a-w-3o3,
.a-w-2o2,
.a-w-1o1  { width: (1/1 ) * 100%; }
.a-w-5o10,
.a-w-3o6,
.a-w-2o4,
.a-w-4o8,
.a-w-1o2  { width: (1/2 ) * 100%; }
.a-w-2o6,
.a-w-1o3  { width: (1/3 ) * 100%; }
.a-w-4o6,
.a-w-2o3  { width: (2/3 ) * 100%; }
.a-w-2o8,
.a-w-1o4  { width: (1/4 ) * 100%; }
.a-w-6o8,
.a-w-3o4  { width: (3/4 ) * 100%; }
.a-w-2o10,
.a-w-1o5  { width: (1/5 ) * 100%; }
.a-w-4o10,
.a-w-2o5  { width: (2/5 ) * 100%; }
.a-w-6o10,
.a-w-3o5  { width: (3/5 ) * 100%; }
.a-w-8o10,
.a-w-4o5  { width: (4/5 ) * 100%; }
.a-w-1o6  { width: (1/6 ) * 100%; }
.a-w-5o6  { width: (5/6 ) * 100%; }
.a-w-1o8  { width: (1/8 ) * 100%; }
.a-w-3o8  { width: (3/8 ) * 100%; }
.a-w-5o8  { width: (5/8 ) * 100%; }
.a-w-7o8  { width: (7/8 ) * 100%; }
.a-w-1o10 { width: (1/10) * 100%; }
.a-w-3o10 { width: (3/10) * 100%; }
.a-w-7o10 { width: (7/10) * 100%; }
.a-w-9o10 { width: (9/10) * 100%; }
@media screen and (min-width: 30em) {
  .a-w-10o10-sK,
  .a-w-8o8-sMK,
  .a-w-6o6-sK,
  .a-w-5o5-sK,
  .a-w-4o4-sK,
  .a-w-3o3-sK,
  .a-w-2o2-sK,
  .a-w-1o1-sK  { .a-w-1o1; }
  .a-w-5o10-sK,
  .a-w-3o6-sK,
  .a-w-2o4-sK,
  .a-w-4o8-sK,
  .a-w-1o2-sK  { .a-w-1o2; }
  .a-w-2o6-sK,
  .a-w-1o3-sK  { .a-w-1o3; }
  .a-w-4o6-sK,
  .a-w-2o3-sK  { .a-w-2o3; }
  .a-w-2o8-sK,
  .a-w-1o4-sK  { .a-w-1o4; }
  .a-w-6o8-sK,
  .a-w-3o4-sK  { .a-w-3o4; }
  .a-w-2o10-sK,
  .a-w-1o5-sK  { .a-w-1o5; }
  .a-w-4o10-sK,
  .a-w-2o5-sK  { .a-w-2o5; }
  .a-w-6o10-sK,
  .a-w-3o5-sK  { .a-w-3o5; }
  .a-w-8o10-sK,
  .a-w-4o5-sK  { .a-w-4o5; }
  .a-w-1o6-sK  { .a-w-1o6; }
  .a-w-5o6-sK  { .a-w-5o6; }
  .a-w-1o8-sK  { .a-w-1o8; }
  .a-w-3o8-sK  { .a-w-3o8; }
  .a-w-5o8-sK  { .a-w-5o8; }
  .a-w-7o8-sK  { .a-w-7o8; }
  .a-w-1o10-sK { .a-w-1o10; }
  .a-w-3o10-sK { .a-w-3o10; }
  .a-w-7o10-sK { .a-w-7o10; }
  .a-w-9o10-sK { .a-w-9o10; }
}
@media screen and (min-width: 45em) {
  .a-w-10o10-sM,
  .a-w-8o8-sM,
  .a-w-6o6-sM,
  .a-w-5o5-sM,
  .a-w-4o4-sM,
  .a-w-3o3-sM,
  .a-w-2o2-sM,
  .a-w-1o1-sM  { .a-w-1o1; }
  .a-w-5o10-sM,
  .a-w-3o6-sM,
  .a-w-2o4-sM,
  .a-w-4o8-sM,
  .a-w-1o2-sM  { .a-w-1o2; }
  .a-w-2o6-sM,
  .a-w-1o3-sM  { .a-w-1o3; }
  .a-w-4o6-sM,
  .a-w-2o3-sM  { .a-w-2o3; }
  .a-w-2o8-sM,
  .a-w-1o4-sM  { .a-w-1o4; }
  .a-w-6o8-sM,
  .a-w-3o4-sM  { .a-w-3o4; }
  .a-w-2o10-sM,
  .a-w-1o5-sM  { .a-w-1o5; }
  .a-w-4o10-sM,
  .a-w-2o5-sM  { .a-w-2o5; }
  .a-w-6o10-sM,
  .a-w-3o5-sM  { .a-w-3o5; }
  .a-w-8o10-sM,
  .a-w-4o5-sM  { .a-w-4o5; }
  .a-w-1o6-sM  { .a-w-1o6; }
  .a-w-5o6-sM  { .a-w-5o6; }
  .a-w-1o8-sM  { .a-w-1o8; }
  .a-w-3o8-sM  { .a-w-3o8; }
  .a-w-5o8-sM  { .a-w-5o8; }
  .a-w-7o8-sM  { .a-w-7o8; }
  .a-w-1o10-sM { .a-w-1o10; }
  .a-w-3o10-sM { .a-w-3o10; }
  .a-w-7o10-sM { .a-w-7o10; }
  .a-w-9o10-sM { .a-w-9o10; }
}
@media screen and (min-width: 60em) {
  .a-w-10o10-sG,
  .a-w-8o8-sG,
  .a-w-6o6-sG,
  .a-w-5o5-sG,
  .a-w-4o4-sG,
  .a-w-3o3-sG,
  .a-w-2o2-sG,
  .a-w-1o1-sG  { .a-w-1o1; }
  .a-w-5o10-sG,
  .a-w-3o6-sG,
  .a-w-2o4-sG,
  .a-w-4o8-sG,
  .a-w-1o2-sG  { .a-w-1o2; }
  .a-w-2o6-sG,
  .a-w-1o3-sG  { .a-w-1o3; }
  .a-w-4o6-sG,
  .a-w-2o3-sG  { .a-w-2o3; }
  .a-w-2o8-sG,
  .a-w-1o4-sG  { .a-w-1o4; }
  .a-w-6o8-sG,
  .a-w-3o4-sG  { .a-w-3o4; }
  .a-w-2o10-sG,
  .a-w-1o5-sG  { .a-w-1o5; }
  .a-w-4o10-sG,
  .a-w-2o5-sG  { .a-w-2o5; }
  .a-w-6o10-sG,
  .a-w-3o5-sG  { .a-w-3o5; }
  .a-w-8o10-sG,
  .a-w-4o5-sG  { .a-w-4o5; }
  .a-w-1o6-sG  { .a-w-1o6; }
  .a-w-5o6-sG  { .a-w-5o6; }
  .a-w-1o8-sG  { .a-w-1o8; }
  .a-w-3o8-sG  { .a-w-3o8; }
  .a-w-5o8-sG  { .a-w-5o8; }
  .a-w-7o8-sG  { .a-w-7o8; }
  .a-w-1o10-sG { .a-w-1o10; }
  .a-w-3o10-sG { .a-w-3o10; }
  .a-w-7o10-sG { .a-w-7o10; }
  .a-w-9o10-sG { .a-w-9o10; }
}
@media screen and (min-width: 75em) {
  .a-w-10o10-sT,
  .a-w-8o8-sT,
  .a-w-6o6-sT,
  .a-w-5o5-sT,
  .a-w-4o4-sT,
  .a-w-3o3-sT,
  .a-w-2o2-sT,
  .a-w-1o1-sT  { .a-w-1o1; }
  .a-w-5o10-sT,
  .a-w-3o6-sT,
  .a-w-2o4-sT,
  .a-w-4o8-sT,
  .a-w-1o2-sT  { .a-w-1o2; }
  .a-w-2o6-sT,
  .a-w-1o3-sT  { .a-w-1o3; }
  .a-w-4o6-sT,
  .a-w-2o3-sT  { .a-w-2o3; }
  .a-w-2o8-sT,
  .a-w-1o4-sT  { .a-w-1o4; }
  .a-w-6o8-sT,
  .a-w-3o4-sT  { .a-w-3o4; }
  .a-w-2o10-sT,
  .a-w-1o5-sT  { .a-w-1o5; }
  .a-w-4o10-sT,
  .a-w-2o5-sT  { .a-w-2o5; }
  .a-w-6o10-sT,
  .a-w-3o5-sT  { .a-w-3o5; }
  .a-w-8o10-sT,
  .a-w-4o5-sT  { .a-w-4o5; }
  .a-w-1o6-sT  { .a-w-1o6; }
  .a-w-5o6-sT  { .a-w-5o6; }
  .a-w-1o8-sT  { .a-w-1o8; }
  .a-w-3o8-sT  { .a-w-3o8; }
  .a-w-5o8-sT  { .a-w-5o8; }
  .a-w-7o8-sT  { .a-w-7o8; }
  .a-w-1o10-sT { .a-w-1o10; }
  .a-w-3o10-sT { .a-w-3o10; }
  .a-w-7o10-sT { .a-w-7o10; }
  .a-w-9o10-sT { .a-w-9o10; }
}
//++++ end # PERCENTAGE-BASED WIDTHS ++++//


//++++++++++++++++++++++++++++++++//
//    # PIXEL-BASED WIDTHS
//++++++++++++++++++++++++++++++++//
@px_per_it: 96;
@max_px: 1440;
// Generates a class `.a-w-‹p›px` (e.g. `.a-w-288px`), where
// ‹p› is 96*‹n›, and ‹n› is the integer argument.
// The mixin is recursive, starting at ‹n›==1,
// incrementing ‹n› each time it is called,
// stopping when ‹n›==15 (‹p›==1440).
// ^params
// @i - the integer multiple of 96px for the width
.gen-w-px(@i) when (@i =< @max_px) {
  .a-w-@{i}px { width: (@i * 1px); }
  @media screen and (min-width: 30em) { .a-w-@{i}px-sK { width: (@i * 1px); } }
  @media screen and (min-width: 45em) { .a-w-@{i}px-sM { width: (@i * 1px); } }
  @media screen and (min-width: 60em) { .a-w-@{i}px-sG { width: (@i * 1px); } }
  @media screen and (min-width: 75em) { .a-w-@{i}px-sT { width: (@i * 1px); } }
  .gen-w-px(@i + @px_per_it);
}
.gen-w-px(@px_per_it);
//++++ end # PIXEL-BASED WIDTHS ++++//


//++++++++++++++++++++++++++++++++//
//    # EM-BASED WIDTHS
//++++++++++++++++++++++++++++++++//
@em_per_it: 5;
@max_em: 90;
// Generates a class `.a-w-‹e›px` (e.g. `.a-w-30em`), where
// ‹e› is 5*‹n›, and ‹n› is the integer argument.
// The mixin is recursive, starting at ‹n›==1,
// incrementing ‹n› each time it is called,
// stopping when ‹n›==18 (‹e›==90).
// ^params
// @i - the integer multiple of 5em for the width
.gen-w-em(@i) when (@i =< @max_em) {
  .a-w-@{i}em { width: (@i * 1em); }
  @media screen and (min-width: 30em) { .a-w-@{i}em-sK { width: (@i * 1em); } }
  @media screen and (min-width: 45em) { .a-w-@{i}em-sM { width: (@i * 1em); } }
  @media screen and (min-width: 60em) { .a-w-@{i}em-sG { width: (@i * 1em); } }
  @media screen and (min-width: 75em) { .a-w-@{i}em-sT { width: (@i * 1em); } }
  .gen-w-em(@i+@em_per_it);
}
.gen-w-em(@em_per_it);
//++++ end # EM-BASED WIDTHS ++++//
