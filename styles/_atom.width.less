
/*################################*\
    conf  |  _atom.width.less
\*################################*/


// Sets the width of an element.
// Percentage-based widths are fractions with denominators 1–6, and 10.
// Pixel-based widths are multiples of 16px, up to 960px.
// Em-based widths are multiples of 15em, up to 90em.
// If you need more, you better just use inline styles.
//
// ^author
// : Chris Harvey
// ^updated
// : 2016-02-09
.a-w-0 { width: 0; }

//++++++++++++++++++++++++++++++++//
//    # PERCENTAGE-BASED WIDTHS
//++++++++++++++++++++++++++++++++//
.a-w-10o10,
.a-w-8o8,
.a-w-6o6,
.a-w-5o5,
.a-w-4o4,
.a-w-3o3,
.a-w-2o2,
.a-w-1o1  { width: (1/1 ) * 100%; }
.a-w-5o10,
.a-w-3o6,
.a-w-2o4,
.a-w-4o8,
.a-w-1o2  { width: (1/2 ) * 100%; }
.a-w-2o6,
.a-w-1o3  { width: (1/3 ) * 100%; }
.a-w-4o6,
.a-w-2o3  { width: (2/3 ) * 100%; }
.a-w-2o8,
.a-w-1o4  { width: (1/4 ) * 100%; }
.a-w-6o8,
.a-w-3o4  { width: (3/4 ) * 100%; }
.a-w-2o10,
.a-w-1o5  { width: (1/5 ) * 100%; }
.a-w-4o10,
.a-w-2o5  { width: (2/5 ) * 100%; }
.a-w-6o10,
.a-w-3o5  { width: (3/5 ) * 100%; }
.a-w-8o10,
.a-w-4o5  { width: (4/5 ) * 100%; }
.a-w-1o6  { width: (1/6 ) * 100%; }
.a-w-5o6  { width: (5/6 ) * 100%; }
.a-w-1o8  { width: (1/8 ) * 100%; }
.a-w-3o8  { width: (3/8 ) * 100%; }
.a-w-5o8  { width: (5/8 ) * 100%; }
.a-w-7o8  { width: (7/8 ) * 100%; }
.a-w-1o10 { width: (1/10) * 100%; }
.a-w-3o10 { width: (3/10) * 100%; }
.a-w-7o10 { width: (7/10) * 100%; }
.a-w-9o10 { width: (9/10) * 100%; }
//++++ end # PERCENTAGE-BASED WIDTHS ++++//


//++++++++++++++++++++++++++++++++//
//    # PIXEL-BASED WIDTHS
//++++++++++++++++++++++++++++++++//
// Generates a class `.a-w-‹p›px` (e.g. `.a-w-288px`), where
// ‹p› is 96*‹n›, and ‹n› is the integer argument.
// The mixin is recursive, starting at ‹n›==1,
// incrementing ‹n› each time it is called,
// stopping when ‹n›==15 (‹p›==1440).
// ^params
// @n - the integer multiple of 96px for the width
.gen-w-px(@n) when (@n =< 15) {
  @p: @n * 96;
  .a-w-@{p}px {
    width: (@p * 1px);
  }
  .gen-w-px(@n+1);
}
.gen-w-px(1);
//++++ end # PIXEL-BASED WIDTHS ++++//


//++++++++++++++++++++++++++++++++//
//    # EM-BASED WIDTHS
//++++++++++++++++++++++++++++++++//
// Generates a class `.a-w-‹e›px` (e.g. `.a-w-30em`), where
// ‹e› is 5*‹n›, and ‹n› is the integer argument.
// The mixin is recursive, starting at ‹n›==1,
// incrementing ‹n› each time it is called,
// stopping when ‹n›==18 (‹e›==90).
// ^params
// @n - the integer multiple of 5em for the width
.gen-w-em(@n) when (@n =< 18) {
  @e: @n * 5;
  .a-w-@{e}em {
    width: (@e * 1em);
  }
  .gen-w-em(@n+1);
}
.gen-w-em(1);
//++++ end # EM-BASED WIDTHS ++++//
